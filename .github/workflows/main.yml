name: Test hero-app

on:
  push:
    branches: [main]

jobs:
  run-hero-action:
    runs-on: ubuntu-latest

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      #----------------------------------------------
      #  create postgres database and env file
      #----------------------------------------------
      - name: run postgresql database
        run: |
          mv example.env .env
          docker run --name heroes-pg -d \
            -e POSTGRESQL_USERNAME=hero \
            -e POSTGRESQL_PASSWORD=heroPass123 \
            -e POSTGRESQL_DATABASE=heroes_db_test \
            bitnami/postgresql:13
      - name: Update .env with container IP
        run: |
          CONTAINER_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' heroes-pg)
          sed -i "s|heroes-pg|$CONTAINER_IP|" .env
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
      #----------------------------------------------
      #   conncet to database and run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          alembic upgrade head
          coverage run -m pytest && coverage report -m
